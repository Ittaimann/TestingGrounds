Tutorial 1

In the Tutorial 1 scene we have the main camera, three spheres and the global directional light,
as well as a proper sky box. 

Each sphere has been passed a different shader, in order from left to right, we have the unlit default vertex shader, 
the default surface shader, and the unity standard shader. For these tutorials we will primarily be looking at vertex 
shaders, as surface shaders are essentially vertex shaders where the lighting has been pre configured for us.

Looking at each in the scene or game view you will notice that the vertex shader sphere (named vertex) is completely white, and does 
not react to the change in lighting. This is because we haven't made it react yet to lighting (something we will probably cover later).
Looking at its material editor we see only one variable that is changeable and the tiling/offset controls (disregard render queue for now). 
Drag the bricks file into the "texture" box. This is the only thing that the vertex shader (our vertex shader) can do currently.
Try applying the bricks texture to the surface shader sphere and mess around with the sliders and control controls. Notice how the 
sphere changes in reaction to these changes, also play the scene and watch the changes in reaction to lighting.

Finally, look at the standard shader sphere, this one has much more options, and many of these will be covered in these tutorials,
just know that these are options that are available from the standard unity asset shader.

Finally look at the two shader files that are in the unity project, you don't need to understand these immediately, but recognize some
of the differences from the syntax in these files, and the syntax of python,c#, or c++. There should be some very noticeable and maybe
even startling differences that will be covered in the next tutorial. 

Also you might see online the idea of a geometry shader. This is essentially a shader that takes the geometry of the object into account
as input and lets us manipulate the geometry during the rendering process. To be honest this concept is beyond the scope of what we will
most likely be doing (I also don't entirely understand it currently). Try to apply this shader to a material and see what it does.
 
This concludes tutorial one. 

